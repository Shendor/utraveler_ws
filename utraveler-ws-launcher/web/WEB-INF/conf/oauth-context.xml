<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-3.1.xsd
                           http://www.springframework.org/schema/security/oauth2
                           http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

    <!--http://localhost:8080/oauth/token?grant_type=password&client_id=utraveler-wp&client_secret=utraveler_secret_code&username=shen&password=123-->

    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>

    <http create-session="never" entry-point-ref="clientAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false"/>
        <intercept-url pattern="/rest/user-rest/me/**" access="ROLE_USER" />
        <intercept-url pattern="/rest/event-rest/**" access="ROLE_USER"/>
        <intercept-url pattern="/rest/photo-rest/**" access="ROLE_USER"/>
        <intercept-url pattern="/rest/spending-rest/**" access="ROLE_USER"/>
        <intercept-url pattern="/rest/route-rest/**" access="ROLE_USER"/>
        <intercept-url pattern="/rest/message-rest/**" access="ROLE_USER"/>
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>

    <oauth:resource-server id="resourceServerFilter" resource-id="utraveler-ws" token-services-ref="tokenServices"/>

    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="utraveler-ws"/>
        <property name="typeName" value="Basic"/>
    </bean>

    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService"/>
    </authentication-manager>

    <authentication-manager alias="userAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <!-- <authentication-provider user-service-ref="userDetailsService">
         </authentication-provider>-->
        <authentication-provider ref="userDetailsService"/>
    </authentication-manager>

    <bean id="userDetails" class="com.utraveler.ws.auth.UserDetailsServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="resetPasswordRecordDao" ref="resetPasswordRecordDao"/>
        <property name="userMapper" ref="userMapper"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="userSettingDao" ref="userSettingDao"/>
        <property name="userSettingsMapper" ref="userSettingMapper"/>
        <property name="mailService" ref="mailService"/>
    </bean>

    <bean id="mailService" class="com.utraveler.ws.service.MailServiceImpl">
    </bean>

    <!-- <bean id="userDetailsService" class="org.springframework.security.config.authentication.CachingUserDetailsService">
         <constructor-arg ref="userDetails"/>
     </bean>-->

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg name="strength" value="10"/>
    </bean>

    <bean id="userDetailsService" class="com.utraveler.ws.auth.UTravelerAuthenticationProvider">
        <property name="userDetailsService" ref="userDetails"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="facebookAuthVerifier">
            <bean class="com.utraveler.ws.auth.FacebookAuthenticationVerifier"/>
        </property>
    </bean>

    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
    </bean>

    <bean id="tokenStore" class="com.utraveler.ws.auth.ExternalStorageTokenService"/>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

    <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="tokenServices"/>
    </bean>

    <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
                                user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:password authentication-manager-ref="userAuthenticationManager"/>
    </oauth:authorization-server>

    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="utraveler-wp" authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="utraveler_secret_code" authorities="ROLE_USER"/>
    </oauth:client-details-service>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <sec:expression-handler ref="oauthExpressionHandler"/>
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler"/>

    <!--<oauth:web-expression-handler id="oauthWebExpressionHandler"/>-->

</beans>